package com.example.StoreEmployee;

import com.example.StoreEmployee.Tables.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/storeapplication") // This means URL's start with /storeapplication (after Application path)
public class MainController {
  @Autowired // This means to get the bean called Repository
  // Which is auto-generated by Spring, we will use it to handle the data
  private StoreRepository storeRepository;
  @Autowired // This means to get the bean called Repository
  private EmployeeRepository employeeRepository;

  ///////////////////////////////////////////////////////////
  // Store table endpoints

  // Index endpoint
  @GetMapping(path = "/stores")
  public @ResponseBody Iterable<Store> getAllStores() {
    return storeRepository.findAll();
  }

  // show endpoint
  @GetMapping(path = "/stores/{id}")
  public @ResponseBody Store getStore(@PathVariable Integer id) {
    return storeRepository.findById(id).orElse(new Store());
  }

  // Create endpoint
  @PostMapping(path = "/stores")
  public @ResponseBody Integer createStore(@RequestParam String name) {
    Store newStore = new Store();
    newStore.setName(name);
    storeRepository.save(newStore);

    return newStore.getId();
  }

  // update endpoint
  @PatchMapping(path = "/stores/{id}")
  public @ResponseBody Store updateStore(@PathVariable Integer id) {
    Store store = storeRepository.findById(id).orElse(new Store());
    store.setName("updated name!");
    storeRepository.save(store);

    return store;
  }

  // delete endpoint
  @DeleteMapping(path = "/stores/{id}")
  public @ResponseBody String deleteStore(@PathVariable Integer id) {
    storeRepository.deleteById(id);

    return "Deleted";
  }

  // Store table endpoints
  ///////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////
  // Employee table endpoints

  // Index endpoint
  @GetMapping(path = "/employees")
  public @ResponseBody Iterable<Employee> getAllEmployees() {
    return employeeRepository.findAll();
  }

  // show endpoint
  @GetMapping(path = "/employees/{id}")
  public @ResponseBody Employee getEmployee(@PathVariable Integer id) {
    return employeeRepository.findById(id).orElse(new Employee());
  }

  // Create endpoint
  @PostMapping(path = "/employees")
  public @ResponseBody Integer createEmployee(@RequestParam String name) {
    Employee newEmployee = new Employee();
    newEmployee.setName(name);
    employeeRepository.save(newEmployee);

    return newEmployee.getId();
  }

  // update endpoint
  @PatchMapping(path = "/employees/{id}")
  public @ResponseBody Employee updateEmployee(@PathVariable Integer id) {
    Employee employee = employeeRepository.findById(id).orElse(new Employee());
    employee.setName("updated name!");
    employeeRepository.save(employee);

    return employee;
  }

  // delete endpoint
  @DeleteMapping(path = "/employees/{id}")
  public @ResponseBody String deleteEmployee(@PathVariable Integer id) {
    employeeRepository.deleteById(id);

    return "Deleted";
  }

  // Employee table endpoints
  ///////////////////////////////////////////////////////////

}